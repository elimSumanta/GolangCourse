// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"github.com/elim/GoCourses/Model"
	"sync"
)

var (
	lockRepositoryMockSelectCarByIDCar    sync.RWMutex
	lockRepositoryMockSelectCarByIDGerage sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             SelectCarByIDCarFunc: func(id string) []model.GerageStatus {
// 	               panic("mock out the SelectCarByIDCar method")
//             },
//             SelectCarByIDGerageFunc: func(id string) []model.GerageStatus {
// 	               panic("mock out the SelectCarByIDGerage method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// SelectCarByIDCarFunc mocks the SelectCarByIDCar method.
	SelectCarByIDCarFunc func(id string) []model.GerageStatus

	// SelectCarByIDGerageFunc mocks the SelectCarByIDGerage method.
	SelectCarByIDGerageFunc func(id string) []model.GerageStatus

	// calls tracks calls to the methods.
	calls struct {
		// SelectCarByIDCar holds details about calls to the SelectCarByIDCar method.
		SelectCarByIDCar []struct {
			// ID is the id argument value.
			ID string
		}
		// SelectCarByIDGerage holds details about calls to the SelectCarByIDGerage method.
		SelectCarByIDGerage []struct {
			// ID is the id argument value.
			ID string
		}
	}
}

// SelectCarByIDCar calls SelectCarByIDCarFunc.
func (mock *RepositoryMock) SelectCarByIDCar(id string) []model.GerageStatus {
	if mock.SelectCarByIDCarFunc == nil {
		panic("RepositoryMock.SelectCarByIDCarFunc: method is nil but Repository.SelectCarByIDCar was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockRepositoryMockSelectCarByIDCar.Lock()
	mock.calls.SelectCarByIDCar = append(mock.calls.SelectCarByIDCar, callInfo)
	lockRepositoryMockSelectCarByIDCar.Unlock()
	return mock.SelectCarByIDCarFunc(id)
}

// SelectCarByIDCarCalls gets all the calls that were made to SelectCarByIDCar.
// Check the length with:
//     len(mockedRepository.SelectCarByIDCarCalls())
func (mock *RepositoryMock) SelectCarByIDCarCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockSelectCarByIDCar.RLock()
	calls = mock.calls.SelectCarByIDCar
	lockRepositoryMockSelectCarByIDCar.RUnlock()
	return calls
}

// SelectCarByIDGerage calls SelectCarByIDGerageFunc.
func (mock *RepositoryMock) SelectCarByIDGerage(id string) []model.GerageStatus {
	if mock.SelectCarByIDGerageFunc == nil {
		panic("RepositoryMock.SelectCarByIDGerageFunc: method is nil but Repository.SelectCarByIDGerage was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockRepositoryMockSelectCarByIDGerage.Lock()
	mock.calls.SelectCarByIDGerage = append(mock.calls.SelectCarByIDGerage, callInfo)
	lockRepositoryMockSelectCarByIDGerage.Unlock()
	return mock.SelectCarByIDGerageFunc(id)
}

// SelectCarByIDGerageCalls gets all the calls that were made to SelectCarByIDGerage.
// Check the length with:
//     len(mockedRepository.SelectCarByIDGerageCalls())
func (mock *RepositoryMock) SelectCarByIDGerageCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockSelectCarByIDGerage.RLock()
	calls = mock.calls.SelectCarByIDGerage
	lockRepositoryMockSelectCarByIDGerage.RUnlock()
	return calls
}
